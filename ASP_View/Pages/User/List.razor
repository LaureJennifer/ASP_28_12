@page "/users"
@using ASP_28_12.Application.Catalog.User
@using ASP_28_12.Application.Catalog.User.Request
@using ASP_28_12.Application.ViewModels.Pagination
@using ASP_View.Services.User
@using Microsoft.AspNetCore.WebUtilities

@inject HttpClient _httpClient;
@inject ISnackbar _snackbar;

<MudText Typo="Typo.h4" Color="Color.Primary" Class="mb-3">Thông tin người dùng</MudText>
@if (_lstUser == null)
{
    <MudProgressCircular Color="Color.Warning" Indeterminate="true"></MudProgressCircular>
}
else
{
    <EditForm Model="@userPagingRequest" Class="mb-5">
        <MudGrid>
            <MudItem xs="8" md="8">

                <MudInput Placeholder="Tên người dùng" Class="form-control" @bind-Value="userPagingRequest.UserName"></MudInput>
            </MudItem>
            <MudItem xs="2" md="2">
                <MudButton OnClick="()=>SearchByTextFilled()" Class="mt-1" Color="Color.Primary" Variant="Variant.Filled">Search</MudButton>
            </MudItem>
            <MudItem xs="2" md="2">
                <MudButton Color="Color.Primary" Variant="Variant.Filled" Class="mt-1" OnClick="()=>NavigateToUserCreate()">Thêm mới</MudButton>
            </MudItem>
        </MudGrid>

    </EditForm>
    @if (isLoading)
    {
        <p>Loading...</p>
    }
    else
    {
    <MudTable Items="@_lstUser" Hover="true" Striped="true" FixedHeader="true">
        <HeaderContent>
            <MudTh>STT</MudTh>
            <MudTh>Tên</MudTh>
                <MudTh Class="text-center">Hình ảnh</MudTh>
                <MudTh Class="text-center">Ngày tạo</MudTh>
            <MudTh Class="text-center">Email</MudTh>
                <MudTh Class="text-center">Địa chỉ</MudTh>
                <MudTh Class="text-center">Số điện thoại</MudTh>


                <MudTh Class="text-center">Hành động</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="">@(_lstUser.IndexOf(context) + 1)</MudTd>
            <MudTd DataLabel="">@context.UserName</MudTd>
                <MudTd DataLabel="" Class="text-center"><MudImage Width="80" Height="50" Src=@context.UrlImage Class="rounded-lg" /></MudTd>
                <MudTd DataLabel="" Class="text-center">@context.CreatedDate.ToString("hh:mm tt dd/MM/yyyy")</MudTd>
                <MudTd DataLabel="" Class="text-center">@context.Email</MudTd>
                <MudTd DataLabel="" Class="text-center">@context.Address</MudTd>
                <MudTd DataLabel="" Class="text-center">@context.PhoneNumber</MudTd>

                <MudTd DataLabel="">
                    <MudGrid>
                        <MudItem xs="4" md="4" />
                        <MudItem xs="4" md="4">
                            <MudGrid>
                                <MudItem xs="4" md="4">
                                    <MudIconButton Icon="@Icons.Material.Filled.Info" Color="Color.Warning" OnClick="()=>NavigateToDetails(context.Id.ToString())"></MudIconButton>
                                </MudItem>
                                <MudItem xs="4" md="4">
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Success" OnClick="()=>NavigateToUserUpdate(context.Id.ToString())"></MudIconButton>
                                </MudItem>
                                <MudItem xs="4" md="4">
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="()=>OnDeleteClicked(context.Id.ToString())"></MudIconButton>
                                </MudItem>
                            </MudGrid>
                        </MudItem>
                        <MudItem xs="4" md="4" />
                    </MudGrid>

                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudGrid Class="mb-3">
                    <MudItem xs="12" Class="d-flex justify-center mt-3">
                        <MudPagination BoundaryCount="1" ShowPreviousButton="true" ShowNextButton="true" Count="(pagingRespone.MetaData.HasNext ? (pagingRespone.MetaData.CurrentPage + 1) :pagingRespone.MetaData.CurrentPage)" SelectedChanged="OnSelectPagination" />
                    </MudItem>
                </MudGrid>
            </PagerContent>
        </MudTable>
    }
    <MudMessageBox @ref="_mboxDelete" Title="Xác nhận" CancelText="Hủy">
        <MessageContent>
            Xác nhận xóa sản phẩm khỏi danh sách!
        </MessageContent>
        <YesButton>
            <MudButton Color="Color.Primary" OnClick="OnConfirmDelete">
                Xác nhận
            </MudButton>
        </YesButton>
    </MudMessageBox>
}

@code {
    [Inject] IUserApiClient _userApiClient { set; get; }
    [Inject] NavigationManager _navigationManager { get; set; } 
    UserDto userDelete { get; set; } = new();
    PagedList<UserDto> pagingRespone { get; set; } = new();
    UserPagingRequest userPagingRequest = new();
    MudMessageBox _mboxDelete { get; set; } = null!;
    public MetaData metadata = new();
    List<UserDto> _lstUser = new List<UserDto>();
    private bool isLoading = true;
    protected override async Task OnInitializedAsync()
    {
        await GetUserList();
        isLoading = false;
    }

    void NavigateToDetails(string userId)
    {
        _navigationManager.NavigateTo($"/user/details/{userId}");
    }

    void NavigateToUserCreate()
    {
        _navigationManager.NavigateTo("/user-create");
    }

    void NavigateToUserUpdate(string userId)
    {
        _navigationManager.NavigateTo($"/user-update/{userId}");
    }

    private async Task SearchByTextFilled()
    {

        await GetUserList();
    }

    private async Task OnDeleteClicked(string id)
    {
        userDelete = await _userApiClient.GetUserDetails(id);
        bool? result = await _mboxDelete.Show();

        StateHasChanged();

    }
    private async Task OnConfirmDelete()
    {
        bool isError = await _userApiClient.DeleteUser(userDelete.Id);

        await GetUserList();
        if (isError)
        {
            _snackbar.Add("Xóa thành công", Severity.Success);

        }else
            _snackbar.Add("Xóa thất bại", Severity.Error);

        StateHasChanged();
    }

    private async Task GetUserList()
    {
        var queryStringPara = new Dictionary<string, string>
            {
                ["PageNumber"] = userPagingRequest.PageNumber.ToString()
            };
        if (!string.IsNullOrEmpty(userPagingRequest.UserName)) queryStringPara.Add("username", userPagingRequest.UserName);
        string url = QueryHelpers.AddQueryString("/api/User", queryStringPara);
        var result = await _httpClient.GetFromJsonAsync<PagedList<UserDto>>(url);
         pagingRespone = await _userApiClient.GetUser(userPagingRequest);
        if (result != null)
        {
            pagingRespone = result;
            _lstUser = pagingRespone.Items;
        }
        // _lstUser = pagingRespone.Items;
        // metadata = pagingRespone.MetaData;
    }
    
    async Task OnSelectPagination(int pageNumber)
    {
        userPagingRequest.PageNumber = pageNumber;
        await GetUserList();
    }
}

